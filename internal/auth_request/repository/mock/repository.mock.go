// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/auth_request/repository (interfaces: AuthRequestCache)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./mock/repository.mock.go github.com/zitadel/zitadel/internal/auth_request/repository AuthRequestCache
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/zitadel/zitadel/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRequestCache is a mock of AuthRequestCache interface.
type MockAuthRequestCache struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRequestCacheMockRecorder
	isgomock struct{}
}

// MockAuthRequestCacheMockRecorder is the mock recorder for MockAuthRequestCache.
type MockAuthRequestCacheMockRecorder struct {
	mock *MockAuthRequestCache
}

// NewMockAuthRequestCache creates a new mock instance.
func NewMockAuthRequestCache(ctrl *gomock.Controller) *MockAuthRequestCache {
	mock := &MockAuthRequestCache{ctrl: ctrl}
	mock.recorder = &MockAuthRequestCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRequestCache) EXPECT() *MockAuthRequestCacheMockRecorder {
	return m.recorder
}

// CacheAuthRequest mocks base method.
func (m *MockAuthRequestCache) CacheAuthRequest(ctx context.Context, request *domain.AuthRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheAuthRequest", ctx, request)
}

// CacheAuthRequest indicates an expected call of CacheAuthRequest.
func (mr *MockAuthRequestCacheMockRecorder) CacheAuthRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheAuthRequest", reflect.TypeOf((*MockAuthRequestCache)(nil).CacheAuthRequest), ctx, request)
}

// DeleteAuthRequest mocks base method.
func (m *MockAuthRequestCache) DeleteAuthRequest(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthRequest", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthRequest indicates an expected call of DeleteAuthRequest.
func (mr *MockAuthRequestCacheMockRecorder) DeleteAuthRequest(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthRequest", reflect.TypeOf((*MockAuthRequestCache)(nil).DeleteAuthRequest), ctx, id)
}

// GetAuthRequestByCode mocks base method.
func (m *MockAuthRequestCache) GetAuthRequestByCode(ctx context.Context, code string) (*domain.AuthRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthRequestByCode", ctx, code)
	ret0, _ := ret[0].(*domain.AuthRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthRequestByCode indicates an expected call of GetAuthRequestByCode.
func (mr *MockAuthRequestCacheMockRecorder) GetAuthRequestByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRequestByCode", reflect.TypeOf((*MockAuthRequestCache)(nil).GetAuthRequestByCode), ctx, code)
}

// GetAuthRequestByID mocks base method.
func (m *MockAuthRequestCache) GetAuthRequestByID(ctx context.Context, id string) (*domain.AuthRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthRequestByID", ctx, id)
	ret0, _ := ret[0].(*domain.AuthRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthRequestByID indicates an expected call of GetAuthRequestByID.
func (mr *MockAuthRequestCacheMockRecorder) GetAuthRequestByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRequestByID", reflect.TypeOf((*MockAuthRequestCache)(nil).GetAuthRequestByID), ctx, id)
}

// Health mocks base method.
func (m *MockAuthRequestCache) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockAuthRequestCacheMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockAuthRequestCache)(nil).Health), ctx)
}

// SaveAuthRequest mocks base method.
func (m *MockAuthRequestCache) SaveAuthRequest(ctx context.Context, request *domain.AuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthRequest indicates an expected call of SaveAuthRequest.
func (mr *MockAuthRequestCacheMockRecorder) SaveAuthRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthRequest", reflect.TypeOf((*MockAuthRequestCache)(nil).SaveAuthRequest), ctx, request)
}

// UpdateAuthRequest mocks base method.
func (m *MockAuthRequestCache) UpdateAuthRequest(ctx context.Context, request *domain.AuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthRequest indicates an expected call of UpdateAuthRequest.
func (mr *MockAuthRequestCacheMockRecorder) UpdateAuthRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthRequest", reflect.TypeOf((*MockAuthRequestCache)(nil).UpdateAuthRequest), ctx, request)
}
