syntax = "proto3";


package zitadel.org.v2beta;

import "zitadel/object/v2beta/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/user/v2beta/auth.proto";
import "zitadel/org/v2beta/org.proto";
import "zitadel/user/v2beta/user_service.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/org/v2beta;org";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service";
    version: "2.0-beta";
    description: "This API is intended to manage organizations in a ZITADEL instance. This project is in beta state. It can AND will continue breaking until the services provide the same functionality as the current login.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSING.md";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service OrganizationService {

  // Create a new organization and grant the user(s) permission to manage it
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.create"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create an Organization";
      description: "Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v2beta/organizations"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organizations";
      summary: "Update Organization";
      description: "Change the name of the organization."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

    rpc GetOrganizationByID(GetOrganizationByIDRequest) returns (GetOrganizationByIDResponse) {
      option (google.api.http) = {
        get: "/v2beta/organizations"
      };

      option (zitadel.protoc_gen_zitadel.v2.options) = {
        auth_option: {
          permission: "iam.read";
        }
        http_response: {
          success_code: 200
        }
      };

      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: "Organizations";
        summary: "Get Organization By ID";
        description: "Returns an organization by its ID."
        responses: {
            key: "200";
            value: {
                description: "requested organization found";
            };
        };
      };
    }

    rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
      option (google.api.http) = {
          post: "/v2beta/organizations/_search";
          body: "*";
      };

      option (zitadel.protoc_gen_zitadel.v2.options) = {
        auth_option: {
          permission: "iam.read";
        }
        http_response: {
          success_code: 200
        }
      };

      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: "Organizations";
        summary: "Search Organization";
        description: "Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition."
        responses: {
          key: "200";
          value: {
            description: "list of organizations matching the query";
          };
        };
        responses: {
          key: "400";
          value: {
            description: "invalid list query";
            schema: {
              json_schema: {
                ref: "#/definitions/rpcStatus";
              };
            };
          };
        };
      };
    }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
        delete: "/v2beta/organizations"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.write";
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Organizations";
      summary: "Remove Organization";
      description: "Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in."
      responses: {
        key: "200";
        value: {
            description: "org removed successfully";
        };
      };
      responses: {
        key: "400";
        value: {
          description: "invalid org";
          schema: {
            json_schema: {
                ref: "#/definitions/rpcStatus";
              };
            };
        };
      };
    };
  }

}

message CreateOrganizationRequest{
  message Admin {
    oneof user_type{
      string user_id = 1;
      zitadel.user.v2beta.AddHumanUserRequest human = 2;
    }
    // specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)
    repeated string roles = 3;
  }

  string name = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"ZITADEL\"";
    }
  ];
  repeated Admin admins = 2;
}

message CreateOrganizationResponse{
  message CreatedAdmin {
    string user_id = 1;
    optional string email_code = 2;
    optional string phone_code = 3;
  }
  zitadel.object.v2beta.Details details = 1;
  string organization_id = 2;
  repeated CreatedAdmin created_admins = 3;
}

message UpdateOrganizationRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to update."
    }
  ];

  string name = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"Customer 1\"";
    }
  ];
}

message UpdateOrganizationResponse {
  zitadel.object.v2beta.Details details = 1;
}

message GetOrganizationByIDRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to get."
    }
  ];
}

message GetOrganizationByIDResponse {
  zitadel.org.v2beta.Organization organization = 1;
}

message ListOrganizationsRequest {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description: "Search query for lists";
            required: ["query"]
        };
    };

    //list limitations and ordering
    // zitadel.v1.ListQuery query = 1;
    zitadel.object.v2beta.ListQuery query = 1;
    // the field the result is sorted
    // zitadel.org.v1.OrgFieldName sorting_column = 2;
    zitadel.org.v2beta.OrgFieldName sorting_column = 2;
    //criteria the client is looking for
    repeated zitadel.org.v2beta.OrgQuery queries = 3;
}

message ListOrganizationsResponse {
    zitadel.object.v2beta.ListDetails details = 1;
  // zitadel.org.v2beta.Organization organization = 1;
    zitadel.org.v2beta.OrgFieldName sorting_column = 2;
    repeated zitadel.org.v2beta.Organization result = 3;
}

message DeleteOrganizationRequest {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            required: ["org_id"]
        };
    };

    string org_id = 1 [
        (validate.rules).string = {min_len: 1, max_len: 200},
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"69629023906488334\"";
            min_length: 1;
            max_length: 200;
        }
    ];
}

message DeleteOrganizationResponse {
  zitadel.object.v2beta.Details details = 1;
}
