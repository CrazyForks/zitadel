syntax = "proto3";


package zitadel.org.v2beta;

import "zitadel/object/v2beta/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/user/v2beta/auth.proto";
import "zitadel/org/v2beta/org.proto";
import "zitadel/metadata/v2beta/metadata.proto";
import "zitadel/user/v2beta/user_service.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/org/v2beta;org";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service";
    version: "2.0-beta";
    description: "This API is intended to manage organizations in a ZITADEL instance. This project is in beta state. It can AND will continue breaking until the services provide the same functionality as the current login.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSING.md";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service OrganizationService {

  // Create Organization
  //
  // Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
  //
  // Required permission:
  //   - `org.create`
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.create"
      }
    };
  }

  // Update Organization
  //
  // Change the name of the organization.
  //
  // Required permission:
  //   - `org.write`
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v2beta/organizations"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };
  }

  // List Organizations
  //
  // Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
  //
  // Required permission:
  //   - `iam.read`
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
        post: "/v2beta/organizations/_search";
        body: "*";
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.read";
      }
    };
      // responses: {
      //   key: "400";
      //   value: {
      //     description: "invalid list query";
      //     schema: {
      //       json_schema: {
      //         ref: "#/definitions/rpcStatus";
      //       };
      //     };
      //   };
      // };
  }

  // Delete Organization
  //
  // Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
  //
  // Required permission:
  //   - `org.write`
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
        delete: "/v2beta/organizations"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write";
      }
    };

      // responses: {
      //   key: "400";
      //   value: {
      //     description: "invalid org";
      //     schema: {
      //       json_schema: {
      //           ref: "#/definitions/rpcStatus";
      //         };
      //       };
      //   };
      // };
  }

  // Set Organization Metadata
  //
  // Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
  //
  // Required permission:
  //   - `org.write`
  rpc SetOrganizationMetadata(SetOrganizationMetadataRequest) returns (SetOrganizationMetadataResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/metadata"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };
  }

  // List Organization Metadata
  //
  // List metadata of an organization filtered by query.
  //
  // Required permission:
  //   - `org.read`
  rpc ListOrganizationMetadata(ListOrganizationMetadataRequest) returns (ListOrganizationMetadataResponse ) {
    option (google.api.http) = {
        post: "/v2beta/organizations/metadata/_search"
        body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = { auth_option: {
        permission: "org.read"
      }
    };

  }

  // Delete Organization Metadata
  //
  // Delete metadata objects from an organization with a specific key.
  //
  // Required permission:
  //   - `org.write`
  rpc DeleteOrganizationMetadata(DeleteOrganizationMetadataRequest) returns (DeleteOrganizationMetadataResponse) {
      option (google.api.http) = {
          delete: "/v2beta/organizations/metadata"
      };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // Add Organization Domain
  //
  // Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
  //
  // Required permission:
  //   - `org.write`
  rpc AddOrganizationDomain(AddOrganizationDomainRequest) returns (AddOrganizationDomainResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/domains"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // List Organization Domains
  //
  // Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
  //
  // Required permission:
  //   - `org.read`
  rpc ListOrganizationDomains(ListOrganizationDomainsRequest) returns (ListOrganizationDomainsResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/domains/_search"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.read"
      }
    };

  }

  // Delete Organization Domain
  //
  // Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
  //
  // Required permission:
  //   - `org.write`
  rpc DeleteOrganizationDomain(DeleteOrganizationDomainRequest) returns (DeleteOrganizationDomainResponse) {
    option (google.api.http) = {
      delete: "/v2beta/organizations/domains"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // Generate Organization Domain Validation
  //
  // Generate a new file to be able to verify your domain with DNS or HTTP challenge.
  //
  // Required permission:
  //   - `org.write`
  rpc GenerateOrganizationDomainValidation(GenerateOrganizationDomainValidationRequest) returns (GenerateOrganizationDomainValidationResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/domains/validation/_generate"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // Verify Organization Domain
  //
  // Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
  //
  // Required permission:
  //   - `org.write`
  rpc VerifyOrganizationDomain(VerifyOrganizationDomainRequest) returns (VerifyOrganizationDomainResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/domains/validation/_verify"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // Deactivate Organization
  //
  // Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
  //
  // Required permission:
  //   - `org.write`
  rpc DeactivateOrganization(DeactivateOrganizationRequest) returns (DeactivateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v2beta/organizations/_deactivate"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

  // Reactivate Organization
  //
  // Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
  //
  // Required permission:
  //   - `org.write`
  rpc ReactivateOrganization(ReactivateOrganizationRequest) returns (ReactivateOrganizationResponse) {
    option (google.api.http) = {
        post: "/v2beta/organizations/_reactivate"
        body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "org.write"
      }
    };

  }

}

message CreateOrganizationRequest{
  message Admin {
    oneof user_type{
      string user_id = 1;
      zitadel.user.v2beta.AddHumanUserRequest human = 2;
    }
    // specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty)
    repeated string roles = 3;
  }

  string name = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"ZITADEL\"";
    }
  ];
  repeated Admin admins = 2;
}

message CreateOrganizationResponse{
  message CreatedAdmin {
    string user_id = 1;
    optional string email_code = 2;
    optional string phone_code = 3;
  }
  zitadel.object.v2beta.Details details = 1;
  string id = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the newly created organization."
    }
  ];
  repeated CreatedAdmin created_admins = 3;
}

message UpdateOrganizationRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to update."
    }
  ];

  string name = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"Customer 1\"";
    }
  ];
}

message UpdateOrganizationResponse {
  //  The timestamp of the update to the organization.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message ListOrganizationsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "Search query for lists";
      required: ["query"]
  };
  };

  // list limitations and ordering
  zitadel.object.v2beta.ListQuery query = 1;
  // the field the result is sorted
  zitadel.org.v2beta.OrgFieldName sorting_column = 2;
  //criteria the client is looking for
  repeated zitadel.org.v2beta.OrgQuery queries = 3;
}

message ListOrganizationsResponse {
  zitadel.object.v2beta.ListDetails details = 1;
  zitadel.org.v2beta.OrgFieldName sorting_column = 2;
  repeated zitadel.org.v2beta.Organization result = 3;
}

message DeleteOrganizationRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    };
  };

  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629023906488334\"";
      min_length: 1;
      max_length: 200;
    }
  ];
}

message DeleteOrganizationResponse {
  //  The timestamp of the deletion of the organization.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message DeactivateOrganizationRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629023906488334\"";
      min_length: 1;
      max_length: 200;
    }
  ];
}

message DeactivateOrganizationResponse {
  //  The timestamp of the deactivation of the organization.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message ReactivateOrganizationRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629023906488334\"";
      min_length: 1;
      max_length: 200;
    }
  ];
}

message ReactivateOrganizationResponse {
  //  The timestamp of the reactivation of the organization.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message AddOrganizationDomainRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to add a domain to."
    }
  ];
    string domain = 2 [
      (validate.rules).string = {min_len: 1, max_len: 200},
      (google.api.field_behavior) = REQUIRED,
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          min_length: 1;
          max_length: 200;
          example: "\"testdomain.com\"";
      }
    ];
}

message AddOrganizationDomainResponse {
  zitadel.object.v2beta.Details details = 1;
}

message ListOrganizationDomainsRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want the domains of."
    }
  ];
  //list limitations and ordering
  zitadel.object.v2beta.ListQuery query = 2;
  //criteria the client is looking for
  repeated DomainSearchQuery queries = 3;
}

message ListOrganizationDomainsResponse {
  zitadel.object.v2beta.ListDetails details = 1;
  repeated Domain result = 2;
}

message DeleteOrganizationDomainRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to delete."
    }
  ];
  string domain = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        min_length: 1;
        max_length: 200;
        example: "\"testdomain.com\"";
    }
  ];
}

message DeleteOrganizationDomainResponse {
  zitadel.object.v2beta.Details details = 1;
  //  The timestamp of the deletion of the organization domain.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message GenerateOrganizationDomainValidationRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to generate a validation request for."
    }
  ];
  string domain = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        min_length: 1;
        max_length: 200;
        example: "\"testdomain.com\"";
    }
  ];
  DomainValidationType type = 3 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}

message GenerateOrganizationDomainValidationResponse {
  string token = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        example: "\"ofSBHsSAVHAoTIE4Iv2gwhaYhTjcY5QX\"";
    }
  ];
  string url = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        example: "\"https://testdomain.com/.well-known/zitadel-challenge/ofSBHsSAVHAoTIE4Iv2gwhaYhTjcY5QX\"";
    }
  ];
}

message VerifyOrganizationDomainRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629012906488334\"";
      description: "Organization ID of the organization you want to veryify the domain on."
    }
  ];
  string domain = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"testdomain.com\"";
    }
  ];
}

message VerifyOrganizationDomainResponse {
  //  The timestamp of the verification of the organization domain.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message Metadata {
  string key = 1 [(validate.rules).string = {min_len: 1, max_len: 200}];
  bytes value = 2 [(validate.rules).bytes = {min_len: 1, max_len: 500000}];
}
message SetOrganizationMetadataRequest{
  string id = 1;
  repeated Metadata metadata = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "Medata (Key/Value)"
      description: "The values have to be base64 encoded.";
      example: "[{\"key\": \"test1\", \"value\": \"VGhpcyBpcyBteSBmaXJzdCB2YWx1ZQ==\"}, {\"key\": \"test2\", \"value\": \"VGhpcyBpcyBteSBzZWNvbmQgdmFsdWU=\"}]"
    }
  ];
}

message SetOrganizationMetadataResponse{
  //  The timestamp of the update of the organization metadata.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message ListOrganizationMetadataRequest {
  string id = 1;
  zitadel.object.v2beta.ListQuery query = 2;
    repeated zitadel.metadata.v2beta.MetadataQuery queries = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            title: "Medata Query"
            description: "Metadata object-specific queries."
        }];
}

message ListOrganizationMetadataResponse {
  zitadel.object.v2beta.ListDetails details = 1;
  repeated zitadel.metadata.v2beta.Metadata result = 2;
}

message DeleteOrganizationMetadataRequest {
  string id = 1;
  repeated string keys = 2 [(validate.rules).repeated.items.string = {min_len: 1, max_len: 200}];
}

message DeleteOrganizationMetadataResponse{
  //  The timestamp of the deletiion of the organization metadata.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}
