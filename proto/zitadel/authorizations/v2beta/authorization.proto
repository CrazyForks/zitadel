syntax = "proto3";

package zitadel.authorizations.v2beta;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "zitadel/object/v2/object.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/authorizations/v2beta;authorizations";

message Authorization {
  // ID is the unique identifier of the authorization.
  string id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The unique identifier of the organization the authorization belongs to.
  string organization_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // CreationDate is the timestamp when the authorization was created.
  google.protobuf.Timestamp creation_date = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
  // ChangeDate is the timestamp when the authorization was last updated.
  // In case the authorization was not updated, this field is equal to the creation date.
  google.protobuf.Timestamp change_date = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
  // State is the current state of the authorization.
  State state = 5;
  User user = 6;
  // The granted organization ID is returned If the user is authorized to a project that was granted by another organization.
  optional string granted_organization_id = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629023906488334\""
    }
  ];
  // The granted organization name is returned If the user is authorized to a project that was granted by another organization.
  optional string granted_organization_name = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"Some Organization\""
    }
  ];
  // Roles contains the roles the user was granted for the project.
  repeated Role roles = 9;
}

enum State {
  STATE_UNSPECIFIED = 0;
  // An active authorization grants the user access with the roles specified on the project.
  STATE_ACTIVE = 1;
  // An inactive authorization temporarily deactivates the granted access and roles.
  // ZITADEL will not include the specific authorization in any authorization information like an access token.
  // But the information can still be accessed using the API.
  STATE_INACTIVE = 2;
}

message User {
  // ID represents the ID of the user who was granted the authorization.
  string id = 1;
  // PreferredLoginName represents the preferred login name of the granted user.
  string preferred_login_name = 2;
  // DisplayName represents the public display name of the granted user.
  string display_name = 3;
  // AvatarURL is the URL to the user's public avatar image.
  string avatar_url = 4;
  // The organization the user belong to.
  // This does not have to correspond with the authorizations organization.
  string organization_id = 5;
}

message Role {
  // Key is the unique identifier of the role.
  string key = 1;
  // DisplayName is the human readable name of the role.
  string display_name = 2;
}

message AuthorizationQuery {
  oneof query {
    option (validate.required) = true;

    // Search for authorizations by their ID.
    AuthorizationIDQuery authorization_id = 1;
    // Search for authorizations by their creation date.
    CreationDateQuery creation_date = 2;
    // Search for authorizations by their change date.
    ChangeDateQuery change_date = 3;
    // Search for authorizations by their state.
    StateQuery state = 4;
    // Search for authorizations by the ID of the user who was granted the authorization.
    UserIDQuery user_id = 5;
    // Search for authorizations by the ID of the organisation the user is part of.
    UserOrganizationIDQuery user_organization_id = 6;
    // Search for authorizations by the preferred login name of the granted user.
    UserPreferredLoginNameQuery user_preferred_login_name = 7;
    // Search for authorizations by the public display name of the granted user.
    UserDisplayNameQuery user_display_name = 8;
    // Search for authorizations by the ID of the project the user was granted the authorization for.
    // This will also include authorizations granted for project grants of the same project.
    ProjectIDQuery project_id = 9;
    // Search for authorizations by the name of the project the user was granted the authorization for.
    // This will also include authorizations granted for project grants of the same project.
    ProjectNameQuery project_name = 10;
    // Search for authorizations by the ID of the project grant the user was granted the authorization for.
    ProjectGrantIDQuery project_grant_id = 11;
    // Search for authorizations by the ID of the organization the authorization was granted for.
    // This can either be the organization the project or the project grant is part of.
    OrganizationIDQuery granted_organization_id = 12;
    OrganizationNameQuery granted_organization_name = 13;
    // Search for authorizations by the key of the role the user was granted.
    RoleKeyQuery role_key = 14;
  }
}

message AuthorizationIDQuery {
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message CreationDateQuery {
  // Specify the creation date of the authorization to search for.
  google.protobuf.Timestamp creation_date = 1;
  // Specify the method to search for the creation date. Default is EQUAL.
  // For example, to search for all authorizations created after a specific date, use GREATER_THAN.
  // To search for all authorizations created before a specific date, use LESS_THAN.
  zitadel.object.v2.TimestampQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message ChangeDateQuery {
  // Specify the change date of the authorization to search for.
  google.protobuf.Timestamp change_date = 1;
  // Specify the method to search for the change date. Default is EQUAL.
  // For example, to search for all authorizations changed after a specific date, use GREATER_THAN.
  // To search for all authorizations changed before a specific date, use LESS_THAN.
  zitadel.object.v2.TimestampQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message StateQuery {
  // Specify the state of the authorization to search for.
  State state = 1 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}

message UserIDQuery {
  // Specify the ID of the user who was granted the authorization to search for.
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message UserOrganizationIDQuery {
  // Specify the ID of the organization the user is part of to search for.
  // Note that this might not be the organization the authorization was granted for.
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message UserPreferredLoginNameQuery {
  // Specify the preferred login name of the granted user to search for.
  string login_name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
  // Specify the method to search for the preferred login name. Default is EQUAL.
  // For example, to search for all authorizations granted to a user with
  // a preferred login name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message UserDisplayNameQuery {
  // Specify the public display name of the granted user to search for.
  string display_name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
  // Specify the method to search for the display name. Default is EQUAL.
  // For example, to search for all authorizations granted to a user with
  // a display name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message ProjectIDQuery {
  // Specify the ID of the project the user was granted the authorization for to search for.
  // Note that this will also include authorizations granted for project grants of the same project.
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message ProjectNameQuery {
  // Specify the name of the project the user was granted the authorization for to search for.
  // Note that this will also include authorizations granted for project grants of the same project.
  string name = 1 [(validate.rules).string = {max_len: 200}];
  // Specify the method to search for the project name. Default is EQUAL.
  // For example, to search for all authorizations granted on a project with
  // a name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message ProjectGrantIDQuery {
  // Specify the ID of the project grant the user was granted the authorization for to search for.
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message OrganizationIDQuery {
  // Specify the ID of the organization the authorization was granted for to search for.
  // This can either be the organization the project or the project grant is part of.
  string id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message OrganizationNameQuery {
  // Specify the name of the organization the authorization was granted for to search for.
  // This can either be the organization the project or the project grant is part of.
  string name = 1 [(validate.rules).string = {max_len: 200}];
  // Specify the method to search for the organization name. Default is EQUAL.
  // For example, to search for all authorizations with an organization name containing a specific string,
  // use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message RoleKeyQuery {
  // Specify the key of the role the user was granted to search for.
  string key = 1 [(validate.rules).string = {max_len: 200}];
  // Specify the method to search for the role key. Default is EQUAL.
  // For example, to search for all authorizations starting with a specific role key,
  // use STARTS_WITH or STARTS_WITH_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message AndQuery {
  repeated AuthorizationQuery queries = 1;
}

message OrQuery {
  repeated AuthorizationQuery queries = 1;
}

message NotQuery {
  AuthorizationQuery query = 1;
}
