syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "zitadel/object/v2/object.proto";

package zitadel.permissions.v2;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/permissions/v2;permissions";

message Manager {
  // ID is the unique identifier of the manager role.
  string id = 1;
  // CreationDate is the timestamp when the manager role was granted.
  google.protobuf.Timestamp creation_date = 2;
  // ChangeDate is the timestamp when the manager role was last updated.
  // In case the manager role was not updated, this field is equal to the creation date.
  google.protobuf.Timestamp change_date = 3;
  // User is the user who was granted the manager role.
  User user = 4;
  // Resource is the type of the resource the manager roles were granted for.
  oneof resource {
    // Instance is returned if the manager roles were granted on the instance level.
    bool instance = 5;
    // Organization provides information about the organization the manager roles were granted for.
    Organization organization = 6;
    // Project provides information about the project the manager roles were granted for.
    Project project = 7;
    // ProjectGrant provides information about the project grant the manager roles were granted for.
    ProjectGrant project_grant = 8;
  }
  // Roles are the roles that were granted to the user for the specified resource.
  repeated string roles = 9;
}

message User {
  // ID is the unique identifier of the user.
  string id = 1;
  // PreferredLoginName is the preferred login name of the user. This value is unique across the whole instance.
  string preferred_login_name = 2;
  // DisplayName is the public display name of the user.
  // By default it's the user's given name and family name, their username or their email address.
  string display_name = 3;
  // AvatarURL is the URL to the user's public avatar image.
  string avatar_url = 4;
  // The organization the user belong to.
  string organization_id = 5;
}

message Organization {
  // ID is the unique identifier of the organization the user was granted the manager role for.
  string id = 1;
  // Name is the name of the organization the user was granted the manager role for.
  string name = 2;
}
message Project {
  // ID is the unique identifier of the project the user was granted the manager role for.
  string id = 1;
  // Name is the name of the project the user was granted the manager role for.
  string name = 2;
  // OrganizationID is the ID of the organization the project belongs to.
  string organization_id = 3;
}
message ProjectGrant {
  // ID is the unique identifier of the project grant the user was granted the manager role for.
  string id = 1;
  // ProjectID is the ID of the project the project grant belongs to.
  string project_id = 2;
  // ProjectName is the name of the project the project grant belongs to.
  string project_name = 3;
  // OrganizationID is the ID of the organization the project grant belongs to.
  string organization_id = 4;
}

message ManagerQuery {
  oneof query {
    option (validate.required) = true;

    // Search for manager roles by their ID.
    ManagerIDQuery manager_id = 1;
    // Search for manager roles by their creation date.
    CreationDateQuery creation_date = 2;
    // Search for manager roles by their change date.
    ChangeDateQuery change_date = 3;
    // Search for managers roles by the ID of the user who was granted the manager role.
    UserIDQuery user_id = 4;
    // Search for managers roles by the ID of the organization the user is part of.
    UserOrganizationIDQuery user_organization_id = 5;
    // Search for managers roles by the preferred login name of the user.
    UserPreferredLoginNameQuery user_preferred_login_name = 6;
    // Search for managers roles by the display name of the user.
    UserDisplayNameQuery user_display_name = 7;
    // Search for managers roles granted for a specific resource.
    ResourceQuery resource = 8;
    // Search for managers roles granted with a specific role.
    RoleQuery role = 9;

    // Combine multiple authorization queries with an AND operation.
    AndQuery and = 10;
    // Combine multiple authorization queries with an OR operation.
    // For example, to search for authorizations of multiple OrganizationIDs.
    OrQuery or = 11;
    // Negate an authorization query.
    NotQuery not = 12;
  }
}

message ManagerIDQuery {
  // Search for managers by their ID.
  string manager_id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message CreationDateQuery {
  // Specify the creation date of the manager role to search for.
  google.protobuf.Timestamp creation_date = 1;
  // Specify the method to search for the creation date. Default is EQUAL.
  // For example, to search for all manager roles created after a specific date, use GREATER_THAN.
  // To search for all manager roles created before a specific date, use LESS_THAN.
  zitadel.object.v2.TimestampQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message ChangeDateQuery {
  // Specify the change date of the manager role to search for.
  google.protobuf.Timestamp change_date = 1;
  // Specify the method to search for the change date. Default is EQUAL.
  // For example, to search for all manager roles changed after a specific date, use GREATER_THAN.
  // To search for all manager roles changed before a specific date, use LESS_THAN.
  zitadel.object.v2.TimestampQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message UserIDQuery {
  // Search for managers by user ID.
  string user_id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message UserOrganizationIDQuery {
  // Search for managers by the organization ID of the user.
  // Note that this might not be the organization the manager role was granted for.
  string organization_id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}

message UserPreferredLoginNameQuery {
  // Search for managers by the preferred login name of the user.
  string preferred_login_name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
  // Specify the method to search for the preferred login name. Default is EQUAL.
  // For example, to search for all manager roles of a user with a preferred login name
  // containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message UserDisplayNameQuery {
  // Search for managers by the display name of the user.
  string display_name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
  // Specify the method to search for the display name. Default is EQUAL.
  // For example, to search for all manager roles of a user with a display name
  // containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
  zitadel.object.v2.TextQueryMethod method = 2 [(validate.rules).enum.defined_only = true];
}

message ResourceQuery {
  // Search for managers by the granted resource.
  oneof resource {
    // Search for managers granted on the instance level.
    bool instance = 1;
    // Search for managers granted on a specific organization.
    string organization_id = 2;
    // Search for managers granted on a specific project.
    string project_id = 3;
    // Search for managers granted on a specific project grant.
    string project_grant_id = 4;
  }
}

message RoleQuery {
  // Search for managers by the granted role.
  string role_key = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 200
  }];
}


message AndQuery {
  repeated ManagerQuery queries = 1;
}

message OrQuery {
  repeated ManagerQuery queries = 1;
}

message NotQuery {
  ManagerQuery query = 1;
}
