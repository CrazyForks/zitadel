{"version":3,"sources":["/home/armond/Code/src/github.com/zitadel/zitadel/clients/typescript/zitadel-client/dist/node.cjs","../src/node.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACJA,uDAA0D;AAC1D,4BAAqC;AAQ9B,SAAS,qBAAA,CAAsB,KAAA,EAAe,IAAA,EAA4B;AAC/E,EAAA,OAAO,8CAAA;AAAoB,IACzB,GAAG,IAAA;AAAA,IACH,YAAA,EAAc,CAAC,GAAI,IAAA,CAAK,aAAA,GAAgB,CAAC,CAAA,EAAI,iEAAA,KAAuC,CAAC;AAAA,EACvF,CAAC,CAAA;AACH;AAEA,MAAA,SAAsB,cAAA,CAAe;AAAA,EACnC,QAAA;AAAA,EACA,OAAA;AAAA,EACA,GAAA;AAAA,EACA;AACF,CAAA,EAKG;AACD,EAAA,OAAO,MAAM,IAAI,kBAAA,CAAQ,CAAC,CAAC,CAAA,CACxB,kBAAA,CAAmB,EAAE,GAAA,EAAK,QAAQ,CAAC,CAAA,CACnC,WAAA,CAAY,CAAA,CACZ,iBAAA,kBAAkB,cAAA,UAAkB,MAAI,CAAA,CACxC,SAAA,CAAU,OAAO,CAAA,CACjB,UAAA,CAAW,OAAO,CAAA,CAClB,WAAA,CAAY,QAAQ,CAAA,CACpB,IAAA,CAAK,MAAM,+BAAA,GAAY,EAAK,OAAO,CAAC,CAAA;AACzC;ADdA;AACE;AACA;AACF,+FAAC","file":"/home/armond/Code/src/github.com/zitadel/zitadel/clients/typescript/zitadel-client/dist/node.cjs","sourcesContent":[null,"import { createGrpcTransport, GrpcTransportOptions } from \"@connectrpc/connect-node\";\nimport { importPKCS8, SignJWT } from \"jose\";\nimport { NewAuthorizationBearerInterceptor } from \"./interceptors.js\";\n\n/**\n * Create a server transport using grpc with the given token and configuration options.\n * @param token\n * @param opts\n */\nexport function createServerTransport(token: string, opts: GrpcTransportOptions) {\n  return createGrpcTransport({\n    ...opts,\n    interceptors: [...(opts.interceptors || []), NewAuthorizationBearerInterceptor(token)],\n  });\n}\n\nexport async function newSystemToken({\n  audience,\n  subject,\n  key,\n  expirationTime,\n}: {\n  audience: string;\n  subject: string;\n  key: string;\n  expirationTime?: number | string | Date;\n}) {\n  return await new SignJWT({})\n    .setProtectedHeader({ alg: \"RS256\" })\n    .setIssuedAt()\n    .setExpirationTime(expirationTime ?? \"1h\")\n    .setIssuer(subject)\n    .setSubject(subject)\n    .setAudience(audience)\n    .sign(await importPKCS8(key, \"RS256\"));\n}\n"]}