{"version":3,"sources":["/home/armond/Code/src/github.com/zitadel/zitadel/clients/typescript/zitadel-client/dist/chunk-RFOVJJ5M.cjs","../src/interceptors.ts"],"names":[],"mappings":"AAAA;ACMO,SAAS,iCAAA,CAAkC,KAAA,EAA4B;AAC5E,EAAA,OAAO,CAAC,IAAA,EAAA,GAAS,CAAC,GAAA,EAAA,GAAQ;AAGxB,IAAA,GAAA,CAAI,CAAC,GAAA,CAAI,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,EAAG;AACpC,MAAA,GAAA,CAAI,MAAA,CAAO,GAAA,CAAI,eAAA,EAAiB,CAAA,OAAA,EAAU,KAAK,CAAA,CAAA;AACjD,IAAA;AACe,IAAA;AACjB,EAAA;AACF;ADNsD;AACA;AACA;AACA","file":"/home/armond/Code/src/github.com/zitadel/zitadel/clients/typescript/zitadel-client/dist/chunk-RFOVJJ5M.cjs","sourcesContent":[null,"import type { Interceptor } from \"@connectrpc/connect\";\n\n/**\n * Creates an interceptor that adds an Authorization header with a Bearer token.\n * @param token\n */\nexport function NewAuthorizationBearerInterceptor(token: string): Interceptor {\n  return (next) => (req) => {\n    // TODO: I am not what is the intent of checking for the Authorization header\n    //  and setting it if it is not present.\n    if (!req.header.get(\"Authorization\")) {\n      req.header.set(\"Authorization\", `Bearer ${token}`);\n    }\n    return next(req);\n  };\n}\n"]}