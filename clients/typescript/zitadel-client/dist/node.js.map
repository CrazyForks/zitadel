{"version":3,"sources":["../src/node.ts"],"sourcesContent":["import { createGrpcTransport, GrpcTransportOptions } from \"@connectrpc/connect-node\";\nimport { importPKCS8, SignJWT } from \"jose\";\nimport { NewAuthorizationBearerInterceptor } from \"./interceptors.js\";\n\n/**\n * Create a server transport using grpc with the given token and configuration options.\n * @param token\n * @param opts\n */\nexport function createServerTransport(token: string, opts: GrpcTransportOptions) {\n  return createGrpcTransport({\n    ...opts,\n    interceptors: [...(opts.interceptors || []), NewAuthorizationBearerInterceptor(token)],\n  });\n}\n\nexport async function newSystemToken({\n  audience,\n  subject,\n  key,\n  expirationTime,\n}: {\n  audience: string;\n  subject: string;\n  key: string;\n  expirationTime?: number | string | Date;\n}) {\n  return await new SignJWT({})\n    .setProtectedHeader({ alg: \"RS256\" })\n    .setIssuedAt()\n    .setExpirationTime(expirationTime ?? \"1h\")\n    .setIssuer(subject)\n    .setSubject(subject)\n    .setAudience(audience)\n    .sign(await importPKCS8(key, \"RS256\"));\n}\n"],"mappings":";;;;;AAAA,SAAS,2BAAiD;AAC1D,SAAS,aAAa,eAAe;AAQ9B,SAAS,sBAAsB,OAAe,MAA4B;AAC/E,SAAO,oBAAoB;AAAA,IACzB,GAAG;AAAA,IACH,cAAc,CAAC,GAAI,KAAK,gBAAgB,CAAC,GAAI,kCAAkC,KAAK,CAAC;AAAA,EACvF,CAAC;AACH;AAEA,eAAsB,eAAe;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,SAAO,MAAM,IAAI,QAAQ,CAAC,CAAC,EACxB,mBAAmB,EAAE,KAAK,QAAQ,CAAC,EACnC,YAAY,EACZ,kBAAkB,kBAAkB,IAAI,EACxC,UAAU,OAAO,EACjB,WAAW,OAAO,EAClB,YAAY,QAAQ,EACpB,KAAK,MAAM,YAAY,KAAK,OAAO,CAAC;AACzC;","names":[]}