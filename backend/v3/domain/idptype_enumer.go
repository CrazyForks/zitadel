// Code generated by "enumer -type IDPType -transform lower -trimprefix IDPType"; DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"
)

const _IDPTypeName = "oidcoauthsamlldapgithubgooglemicrosoftapple"

var _IDPTypeIndex = [...]uint8{0, 4, 9, 13, 17, 23, 29, 38, 43}

const _IDPTypeLowerName = "oidcoauthsamlldapgithubgooglemicrosoftapple"

func (i IDPType) String() string {
	if i >= IDPType(len(_IDPTypeIndex)-1) {
		return fmt.Sprintf("IDPType(%d)", i)
	}
	return _IDPTypeName[_IDPTypeIndex[i]:_IDPTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IDPTypeNoOp() {
	var x [1]struct{}
	_ = x[IDPTypeOIDC-(0)]
	_ = x[IDPTypeOAUTH-(1)]
	_ = x[IDPTypeSAML-(2)]
	_ = x[IDPTypeLDAP-(3)]
	_ = x[IDPTypeGithub-(4)]
	_ = x[IDPTypeGoogle-(5)]
	_ = x[IDPTypeMicrosoft-(6)]
	_ = x[IDPTypeApple-(7)]
}

var _IDPTypeValues = []IDPType{IDPTypeOIDC, IDPTypeOAUTH, IDPTypeSAML, IDPTypeLDAP, IDPTypeGithub, IDPTypeGoogle, IDPTypeMicrosoft, IDPTypeApple}

var _IDPTypeNameToValueMap = map[string]IDPType{
	_IDPTypeName[0:4]:        IDPTypeOIDC,
	_IDPTypeLowerName[0:4]:   IDPTypeOIDC,
	_IDPTypeName[4:9]:        IDPTypeOAUTH,
	_IDPTypeLowerName[4:9]:   IDPTypeOAUTH,
	_IDPTypeName[9:13]:       IDPTypeSAML,
	_IDPTypeLowerName[9:13]:  IDPTypeSAML,
	_IDPTypeName[13:17]:      IDPTypeLDAP,
	_IDPTypeLowerName[13:17]: IDPTypeLDAP,
	_IDPTypeName[17:23]:      IDPTypeGithub,
	_IDPTypeLowerName[17:23]: IDPTypeGithub,
	_IDPTypeName[23:29]:      IDPTypeGoogle,
	_IDPTypeLowerName[23:29]: IDPTypeGoogle,
	_IDPTypeName[29:38]:      IDPTypeMicrosoft,
	_IDPTypeLowerName[29:38]: IDPTypeMicrosoft,
	_IDPTypeName[38:43]:      IDPTypeApple,
	_IDPTypeLowerName[38:43]: IDPTypeApple,
}

var _IDPTypeNames = []string{
	_IDPTypeName[0:4],
	_IDPTypeName[4:9],
	_IDPTypeName[9:13],
	_IDPTypeName[13:17],
	_IDPTypeName[17:23],
	_IDPTypeName[23:29],
	_IDPTypeName[29:38],
	_IDPTypeName[38:43],
}

// IDPTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IDPTypeString(s string) (IDPType, error) {
	if val, ok := _IDPTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IDPTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IDPType values", s)
}

// IDPTypeValues returns all values of the enum
func IDPTypeValues() []IDPType {
	return _IDPTypeValues
}

// IDPTypeStrings returns a slice of all String values of the enum
func IDPTypeStrings() []string {
	strs := make([]string, len(_IDPTypeNames))
	copy(strs, _IDPTypeNames)
	return strs
}

// IsAIDPType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IDPType) IsAIDPType() bool {
	for _, v := range _IDPTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
