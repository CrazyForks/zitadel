// Code generated by "enumer -type IDPType -transform lower -trimprefix IDPType"; DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"
)

const _IDPTypeName = "unspecifiedoidcjwtoauthldapazuregithubgithubenterprisegitlabgitlabselfhostedgoogleapplesaml"

var _IDPTypeIndex = [...]uint8{0, 11, 15, 18, 23, 27, 32, 38, 54, 60, 76, 82, 87, 91}

const _IDPTypeLowerName = "unspecifiedoidcjwtoauthldapazuregithubgithubenterprisegitlabgitlabselfhostedgoogleapplesaml"

func (i IDPType) String() string {
	if i >= IDPType(len(_IDPTypeIndex)-1) {
		return fmt.Sprintf("IDPType(%d)", i)
	}
	return _IDPTypeName[_IDPTypeIndex[i]:_IDPTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IDPTypeNoOp() {
	var x [1]struct{}
	_ = x[IDPTypeUnspecified-(0)]
	_ = x[IDPTypeOIDC-(1)]
	_ = x[IDPTypeJWT-(2)]
	_ = x[IDPTypeOAuth-(3)]
	_ = x[IDPTypeLDAP-(4)]
	_ = x[IDPTypeAzure-(5)]
	_ = x[IDPTypeGitHub-(6)]
	_ = x[IDPTypeGitHubEnterprise-(7)]
	_ = x[IDPTypeGitLab-(8)]
	_ = x[IDPTypeGitLabSelfHosted-(9)]
	_ = x[IDPTypeGoogle-(10)]
	_ = x[IDPTypeApple-(11)]
	_ = x[IDPTypeSAML-(12)]
}

var _IDPTypeValues = []IDPType{IDPTypeUnspecified, IDPTypeOIDC, IDPTypeJWT, IDPTypeOAuth, IDPTypeLDAP, IDPTypeAzure, IDPTypeGitHub, IDPTypeGitHubEnterprise, IDPTypeGitLab, IDPTypeGitLabSelfHosted, IDPTypeGoogle, IDPTypeApple, IDPTypeSAML}

var _IDPTypeNameToValueMap = map[string]IDPType{
	_IDPTypeName[0:11]:       IDPTypeUnspecified,
	_IDPTypeLowerName[0:11]:  IDPTypeUnspecified,
	_IDPTypeName[11:15]:      IDPTypeOIDC,
	_IDPTypeLowerName[11:15]: IDPTypeOIDC,
	_IDPTypeName[15:18]:      IDPTypeJWT,
	_IDPTypeLowerName[15:18]: IDPTypeJWT,
	_IDPTypeName[18:23]:      IDPTypeOAuth,
	_IDPTypeLowerName[18:23]: IDPTypeOAuth,
	_IDPTypeName[23:27]:      IDPTypeLDAP,
	_IDPTypeLowerName[23:27]: IDPTypeLDAP,
	_IDPTypeName[27:32]:      IDPTypeAzure,
	_IDPTypeLowerName[27:32]: IDPTypeAzure,
	_IDPTypeName[32:38]:      IDPTypeGitHub,
	_IDPTypeLowerName[32:38]: IDPTypeGitHub,
	_IDPTypeName[38:54]:      IDPTypeGitHubEnterprise,
	_IDPTypeLowerName[38:54]: IDPTypeGitHubEnterprise,
	_IDPTypeName[54:60]:      IDPTypeGitLab,
	_IDPTypeLowerName[54:60]: IDPTypeGitLab,
	_IDPTypeName[60:76]:      IDPTypeGitLabSelfHosted,
	_IDPTypeLowerName[60:76]: IDPTypeGitLabSelfHosted,
	_IDPTypeName[76:82]:      IDPTypeGoogle,
	_IDPTypeLowerName[76:82]: IDPTypeGoogle,
	_IDPTypeName[82:87]:      IDPTypeApple,
	_IDPTypeLowerName[82:87]: IDPTypeApple,
	_IDPTypeName[87:91]:      IDPTypeSAML,
	_IDPTypeLowerName[87:91]: IDPTypeSAML,
}

var _IDPTypeNames = []string{
	_IDPTypeName[0:11],
	_IDPTypeName[11:15],
	_IDPTypeName[15:18],
	_IDPTypeName[18:23],
	_IDPTypeName[23:27],
	_IDPTypeName[27:32],
	_IDPTypeName[32:38],
	_IDPTypeName[38:54],
	_IDPTypeName[54:60],
	_IDPTypeName[60:76],
	_IDPTypeName[76:82],
	_IDPTypeName[82:87],
	_IDPTypeName[87:91],
}

// IDPTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IDPTypeString(s string) (IDPType, error) {
	if val, ok := _IDPTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IDPTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IDPType values", s)
}

// IDPTypeValues returns all values of the enum
func IDPTypeValues() []IDPType {
	return _IDPTypeValues
}

// IDPTypeStrings returns a slice of all String values of the enum
func IDPTypeStrings() []string {
	strs := make([]string, len(_IDPTypeNames))
	copy(strs, _IDPTypeNames)
	return strs
}

// IsAIDPType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IDPType) IsAIDPType() bool {
	for _, v := range _IDPTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
