// Code generated by "enumer -type SettingType -transform snake -trimprefix SettingType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _SettingTypeName = "unspecifiedloginpassword_complexitypassword_expirybrandingdomainlegal_and_supportlockoutgeneralsecurity"

var _SettingTypeIndex = [...]uint8{0, 11, 16, 35, 50, 58, 64, 81, 88, 95, 103}

const _SettingTypeLowerName = "unspecifiedloginpassword_complexitypassword_expirybrandingdomainlegal_and_supportlockoutgeneralsecurity"

func (i SettingType) String() string {
	if i >= SettingType(len(_SettingTypeIndex)-1) {
		return fmt.Sprintf("SettingType(%d)", i)
	}
	return _SettingTypeName[_SettingTypeIndex[i]:_SettingTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SettingTypeNoOp() {
	var x [1]struct{}
	_ = x[SettingTypeUnspecified-(0)]
	_ = x[SettingTypeLogin-(1)]
	_ = x[SettingTypePasswordComplexity-(2)]
	_ = x[SettingTypePasswordExpiry-(3)]
	_ = x[SettingTypeBranding-(4)]
	_ = x[SettingTypeDomain-(5)]
	_ = x[SettingTypeLegalAndSupport-(6)]
	_ = x[SettingTypeLockout-(7)]
	_ = x[SettingTypeGeneral-(8)]
	_ = x[SettingTypeSecurity-(9)]
}

var _SettingTypeValues = []SettingType{SettingTypeUnspecified, SettingTypeLogin, SettingTypePasswordComplexity, SettingTypePasswordExpiry, SettingTypeBranding, SettingTypeDomain, SettingTypeLegalAndSupport, SettingTypeLockout, SettingTypeGeneral, SettingTypeSecurity}

var _SettingTypeNameToValueMap = map[string]SettingType{
	_SettingTypeName[0:11]:        SettingTypeUnspecified,
	_SettingTypeLowerName[0:11]:   SettingTypeUnspecified,
	_SettingTypeName[11:16]:       SettingTypeLogin,
	_SettingTypeLowerName[11:16]:  SettingTypeLogin,
	_SettingTypeName[16:35]:       SettingTypePasswordComplexity,
	_SettingTypeLowerName[16:35]:  SettingTypePasswordComplexity,
	_SettingTypeName[35:50]:       SettingTypePasswordExpiry,
	_SettingTypeLowerName[35:50]:  SettingTypePasswordExpiry,
	_SettingTypeName[50:58]:       SettingTypeBranding,
	_SettingTypeLowerName[50:58]:  SettingTypeBranding,
	_SettingTypeName[58:64]:       SettingTypeDomain,
	_SettingTypeLowerName[58:64]:  SettingTypeDomain,
	_SettingTypeName[64:81]:       SettingTypeLegalAndSupport,
	_SettingTypeLowerName[64:81]:  SettingTypeLegalAndSupport,
	_SettingTypeName[81:88]:       SettingTypeLockout,
	_SettingTypeLowerName[81:88]:  SettingTypeLockout,
	_SettingTypeName[88:95]:       SettingTypeGeneral,
	_SettingTypeLowerName[88:95]:  SettingTypeGeneral,
	_SettingTypeName[95:103]:      SettingTypeSecurity,
	_SettingTypeLowerName[95:103]: SettingTypeSecurity,
}

var _SettingTypeNames = []string{
	_SettingTypeName[0:11],
	_SettingTypeName[11:16],
	_SettingTypeName[16:35],
	_SettingTypeName[35:50],
	_SettingTypeName[50:58],
	_SettingTypeName[58:64],
	_SettingTypeName[64:81],
	_SettingTypeName[81:88],
	_SettingTypeName[88:95],
	_SettingTypeName[95:103],
}

// SettingTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SettingTypeString(s string) (SettingType, error) {
	if val, ok := _SettingTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SettingTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SettingType values", s)
}

// SettingTypeValues returns all values of the enum
func SettingTypeValues() []SettingType {
	return _SettingTypeValues
}

// SettingTypeStrings returns a slice of all String values of the enum
func SettingTypeStrings() []string {
	strs := make([]string, len(_SettingTypeNames))
	copy(strs, _SettingTypeNames)
	return strs
}

// IsASettingType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SettingType) IsASettingType() bool {
	for _, v := range _SettingTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i SettingType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SettingType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SettingType: %[1]T(%[1]v)", value)
	}

	val, err := SettingTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
