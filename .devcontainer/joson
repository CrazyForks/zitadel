name: zitadel_devcontainer
services:
  api:
    build:
      context: /home/armond/Code/src/github.com/zitadel/zitadel
      dockerfile: apps/api/Dockerfile
    develop:
      watch:
        - path: /home/armond/Code/src/github.com/zitadel/zitadel/zitadel
          action: rebuild
    command:
      - start
      - --config
      - /workspaces/zitadel/.devcontainer/zitadel.yaml
      - --masterkey
      - MasterkeyNeedsToHave32Characters
    container_name: api
    depends_on:
      api-setup:
        condition: service_completed_successfully
        required: true
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: db
    healthcheck:
      test:
        - CMD
        - /app/zitadel
        - ready
        - --config
        - /workspaces/zitadel/.devcontainer/zitadel.yaml
      timeout: 1m0s
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8080"
        protocol: tcp
    volumes:
      - type: bind
        source: /home/armond/Code/src/github.com/zitadel/zitadel
        target: /workspaces/zitadel
        bind:
          create_host_path: true
  api-init:
    build:
      context: /home/armond/Code/src/github.com/zitadel/zitadel
      dockerfile: apps/api/Dockerfile
    command:
      - init
      - --config
      - /workspaces/zitadel/.devcontainer/zitadel.yaml
    container_name: api-init
    depends_on:
      db:
        condition: service_healthy
        required: true
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: db
    healthcheck:
      test:
        - CMD
        - /app/zitadel
        - ready
        - --config
        - /workspaces/zitadel/.devcontainer/zitadel.yaml
      timeout: 1m0s
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8080"
        protocol: tcp
    volumes:
      - type: bind
        source: /home/armond/Code/src/github.com/zitadel/zitadel
        target: /workspaces/zitadel
        bind:
          create_host_path: true
  api-setup:
    build:
      context: /home/armond/Code/src/github.com/zitadel/zitadel
      dockerfile: apps/api/Dockerfile
    command:
      - setup
      - --config
      - /workspaces/zitadel/.devcontainer/zitadel.yaml
      - --steps
      - /workspaces/zitadel/.devcontainer/zitadel.yaml
      - --masterkey
      - MasterkeyNeedsToHave32Characters
    container_name: api-setup
    depends_on:
      api-init:
        condition: service_completed_successfully
        required: true
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: db
    healthcheck:
      test:
        - CMD
        - /app/zitadel
        - ready
        - --config
        - /workspaces/zitadel/.devcontainer/zitadel.yaml
      timeout: 1m0s
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8080"
        protocol: tcp
    volumes:
      - type: bind
        source: /home/armond/Code/src/github.com/zitadel/zitadel
        target: /workspaces/zitadel
        bind:
          create_host_path: true
  db:
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
    container_name: db
    environment:
      PGUSER: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready
        - -U
        - postgres
      timeout: 30s
      interval: 10s
      retries: 5
      start_period: 20s
    image: postgres:17.0-alpine3.19
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /home/armond/Code/src/github.com/zitadel/zitadel/.devcontainer/postgresql.conf
        target: /etc/postgresql/postgresql.conf
        bind:
          create_host_path: true
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
        volume: {}
networks:
  default:
    name: zitadel_devcontainer_default
volumes:
  db-data:
    name: zitadel_devcontainer_db-data
